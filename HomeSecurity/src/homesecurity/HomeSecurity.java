/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package homesecurity;

import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author adria
 */
public class HomeSecurity extends javax.swing.JFrame
{
    public String stringReadFromFileEncryption;
    public String stringReadFromFileDecryption;
    public byte[] bytesReadFromFileEncryption;
    public byte[] bytesReadFromFileDecryption;
    public byte[] encryptedBytes;
    public byte[] decryptedBytes;
    
    private static final int PUBLIC = 0;
    private static final int PRIVATE = 1;
    
    /**
     * Creates new form MainWindow
     */
    public HomeSecurity()
    {
        initComponents();
    }
    
    private void enableEncryptButtonCheck()
    {
        if (!RSAKeyTextField.getText().isEmpty() && !NKeyTextField.getText().isEmpty()
                && !originalFileTextArea.getText().isEmpty())
        {
            encryptButton.setEnabled(true);
        }
        else
        {
            encryptButton.setEnabled(false);
        }
    }
    
    private void enableDecryptButtonCheck()
    {
        if (!RSADecryptKeyTextField.getText().isEmpty() && !NDecryptKeyTextField.getText().isEmpty()
                && !encryptedFilenameDecryptionField.getText().isEmpty())
        {
            decryptButton.setEnabled(true);
        }
        else
        {
            decryptButton.setEnabled(false);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        tabbedPane = new javax.swing.JTabbedPane();
        encryptTab = new javax.swing.JPanel();
        encryptButton = new javax.swing.JButton();
        RSAKeyLabel = new javax.swing.JLabel();
        nLabel = new javax.swing.JLabel();
        RSAKeyTextField = new javax.swing.JTextField();
        NKeyTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        originalFileTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        encryptedTextArea = new javax.swing.JTextArea();
        originalFilenameField = new javax.swing.JTextField();
        encryptedFilenameField = new javax.swing.JTextField();
        chooseFileButton = new javax.swing.JButton();
        originalFileLabel = new javax.swing.JLabel();
        previewLabel = new javax.swing.JLabel();
        encryptedFileLabel = new javax.swing.JLabel();
        encryptKeyGenButton = new javax.swing.JButton();
        encryptLoadKeyButton = new javax.swing.JButton();
        decryptTab = new javax.swing.JPanel();
        decryptionPreviewLabel = new javax.swing.JLabel();
        decryptionEncryptedFilenameLabel = new javax.swing.JLabel();
        encryptedFilenameDecryptionField = new javax.swing.JTextField();
        decryptChooseFileButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        loadedEncryptedFileTextArea = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        decryptedFileTextArea = new javax.swing.JTextArea();
        decryptButton = new javax.swing.JButton();
        NDecryptKeyTextField = new javax.swing.JTextField();
        RSADecryptKeyTextField = new javax.swing.JTextField();
        RSADecryptKeyLabel = new javax.swing.JLabel();
        NKeyDecryptKeyLabel = new javax.swing.JLabel();
        decryptedFilenameField = new javax.swing.JTextField();
        decryptionDecryptedFilenameLabel = new javax.swing.JLabel();
        decryptKeyGenButton = new javax.swing.JButton();
        decryptLoadKeyButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Criptobaralhador de Huffman-Fibonacci");
        setMinimumSize(new java.awt.Dimension(700, 700));

        encryptButton.setText("Criptografar");
        encryptButton.setEnabled(false);
        encryptButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                encryptButtonActionPerformed(evt);
            }
        });

        RSAKeyLabel.setText("Chave RSA");

        nLabel.setText("N");

        RSAKeyTextField.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                RSAKeyTextFieldKeyTyped(evt);
            }
        });

        NKeyTextField.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                NKeyTextFieldKeyTyped(evt);
            }
        });

        originalFileTextArea.setEditable(false);
        originalFileTextArea.setColumns(20);
        originalFileTextArea.setRows(5);
        jScrollPane1.setViewportView(originalFileTextArea);

        encryptedTextArea.setEditable(false);
        encryptedTextArea.setColumns(20);
        encryptedTextArea.setRows(5);
        jScrollPane2.setViewportView(encryptedTextArea);

        originalFilenameField.setEditable(false);

        encryptedFilenameField.setEditable(false);

        chooseFileButton.setText("Escolher arquivo...");
        chooseFileButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chooseFileButtonActionPerformed(evt);
            }
        });

        originalFileLabel.setText("Arquivo original");

        previewLabel.setText("Pré-visualização");

        encryptedFileLabel.setText("Arquivo criptografado");

        encryptKeyGenButton.setText("Gerar chaves");
        encryptKeyGenButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                encryptKeyGenButtonActionPerformed(evt);
            }
        });

        encryptLoadKeyButton.setText("Carregar chaves");
        encryptLoadKeyButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                encryptLoadKeyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout encryptTabLayout = new javax.swing.GroupLayout(encryptTab);
        encryptTab.setLayout(encryptTabLayout);
        encryptTabLayout.setHorizontalGroup(
            encryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encryptTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(encryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(encryptTabLayout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(encryptTabLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(encryptTabLayout.createSequentialGroup()
                        .addComponent(encryptedFileLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(encryptedFilenameField, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, encryptTabLayout.createSequentialGroup()
                        .addGroup(encryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(originalFileLabel)
                            .addComponent(previewLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chooseFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(originalFilenameField, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, encryptTabLayout.createSequentialGroup()
                        .addGroup(encryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(encryptTabLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(RSAKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(encryptTabLayout.createSequentialGroup()
                                .addComponent(RSAKeyLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(encryptTabLayout.createSequentialGroup()
                                .addComponent(nLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                                .addComponent(NKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(encryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(encryptTabLayout.createSequentialGroup()
                        .addComponent(encryptKeyGenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(encryptLoadKeyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        encryptTabLayout.setVerticalGroup(
            encryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, encryptTabLayout.createSequentialGroup()
                .addGroup(encryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(encryptTabLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(encryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(originalFilenameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chooseFileButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, encryptTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(previewLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(originalFileLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(encryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encryptedFilenameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(encryptedFileLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(encryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encryptKeyGenButton)
                    .addComponent(encryptLoadKeyButton))
                .addGap(26, 26, 26)
                .addGroup(encryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(encryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(encryptTabLayout.createSequentialGroup()
                        .addGroup(encryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RSAKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RSAKeyLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(encryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nLabel))))
                .addGap(70, 70, 70))
        );

        tabbedPane.addTab("Criptografar", encryptTab);

        decryptionPreviewLabel.setText("Pré-visualização");

        decryptionEncryptedFilenameLabel.setText("Arquivo criptografado");

        encryptedFilenameDecryptionField.setEditable(false);

        decryptChooseFileButton.setText("Escolher arquivo...");
        decryptChooseFileButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                decryptChooseFileButtonActionPerformed(evt);
            }
        });

        loadedEncryptedFileTextArea.setEditable(false);
        loadedEncryptedFileTextArea.setColumns(20);
        loadedEncryptedFileTextArea.setRows(5);
        jScrollPane3.setViewportView(loadedEncryptedFileTextArea);

        decryptedFileTextArea.setEditable(false);
        decryptedFileTextArea.setColumns(20);
        decryptedFileTextArea.setRows(5);
        jScrollPane4.setViewportView(decryptedFileTextArea);

        decryptButton.setText("Decriptografar");
        decryptButton.setEnabled(false);
        decryptButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                decryptButtonActionPerformed(evt);
            }
        });

        NDecryptKeyTextField.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                NDecryptKeyTextFieldKeyTyped(evt);
            }
        });

        RSADecryptKeyTextField.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                RSADecryptKeyTextFieldKeyTyped(evt);
            }
        });

        RSADecryptKeyLabel.setText("Chave RSA");

        NKeyDecryptKeyLabel.setText("N");

        decryptedFilenameField.setEditable(false);

        decryptionDecryptedFilenameLabel.setText("Arquivo decriptografado");

        decryptKeyGenButton.setText("Gerar chaves");
        decryptKeyGenButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                decryptKeyGenButtonActionPerformed(evt);
            }
        });

        decryptLoadKeyButton.setText("Carregar chave");
        decryptLoadKeyButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                decryptLoadKeyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout decryptTabLayout = new javax.swing.GroupLayout(decryptTab);
        decryptTab.setLayout(decryptTabLayout);
        decryptTabLayout.setHorizontalGroup(
            decryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(decryptTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(decryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, decryptTabLayout.createSequentialGroup()
                        .addGroup(decryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RSADecryptKeyLabel)
                            .addComponent(NKeyDecryptKeyLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(decryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(NDecryptKeyTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                            .addComponent(RSADecryptKeyTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(decryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3)
                    .addGroup(decryptTabLayout.createSequentialGroup()
                        .addComponent(decryptionEncryptedFilenameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                        .addComponent(decryptChooseFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(encryptedFilenameDecryptionField, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, decryptTabLayout.createSequentialGroup()
                        .addComponent(decryptionDecryptedFilenameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(decryptedFilenameField, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(decryptTabLayout.createSequentialGroup()
                        .addGroup(decryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(decryptionPreviewLabel)
                            .addGroup(decryptTabLayout.createSequentialGroup()
                                .addComponent(decryptKeyGenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(decryptLoadKeyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        decryptTabLayout.setVerticalGroup(
            decryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, decryptTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(decryptionPreviewLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(decryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decryptionEncryptedFilenameLabel)
                    .addComponent(encryptedFilenameDecryptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decryptChooseFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(decryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decryptedFilenameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decryptionDecryptedFilenameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(decryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decryptKeyGenButton)
                    .addComponent(decryptLoadKeyButton))
                .addGap(28, 28, 28)
                .addGroup(decryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(decryptButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(decryptTabLayout.createSequentialGroup()
                        .addGroup(decryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RSADecryptKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RSADecryptKeyLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(decryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NDecryptKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NKeyDecryptKeyLabel))))
                .addGap(55, 55, 55))
        );

        tabbedPane.addTab("Decriptografar", decryptTab);

        jLabel1.setFont(new java.awt.Font("Old English Text MT", 0, 24)); // NOI18N
        jLabel1.setText("Criptobaralhador de Huffman-Fibonacci");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(168, 168, 168))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void encryptButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_encryptButtonActionPerformed
    {//GEN-HEADEREND:event_encryptButtonActionPerformed
        String inputKey;
        String inputN;
        BigInteger bigIntegerKey;
        BigInteger bigIntegerN;
        
        inputKey = RSAKeyTextField.getText();
        
        inputN = NKeyTextField.getText();
        
        if (inputKey.isEmpty() || inputN.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Especifique uma chave RSA e o parâmetro N", "Campos não preenchidos", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        /* RSA Encryption section */
        
        try { bigIntegerKey = new BigInteger(inputKey); }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(this, "Chave RSA com formato incorreto (não é um número)", "Parâmetro incorreto", JOptionPane.ERROR_MESSAGE);
            return;
        }
          
        try { bigIntegerN = new BigInteger(inputN); }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(this, "Parâmetro N com formato incorreto (não é um número)", "Parâmetro incorreto", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        RSAKey key = new RSAKey(bigIntegerKey, bigIntegerN);
        Encrypter encrypter = new Encrypter(key);
        
        encryptedBytes = encrypter.encrypt(bytesReadFromFileEncryption);
        
        /* End of RSA encryption section */
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setDialogTitle("Salvar arquivo encriptado como");
        fileChooser.setFileFilter(new TextFileFilter());
        int resultado = fileChooser.showSaveDialog(this);

        if (resultado == JFileChooser.CANCEL_OPTION)
        {
            return;
        }

        File chosenFile = fileChooser.getSelectedFile();

        if(chosenFile.getName().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Nome inválido", "Nome inválido", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String pathToWrite = chosenFile.getAbsolutePath() + ".txt";
        
        try 
        {
            TextWriter.writeOnFile(pathToWrite, encryptedBytes);
            
            encryptedFilenameField.setText(pathToWrite);
            encryptedTextArea.setText(new String(encryptedBytes));
        } 
        catch (IOException ex) 
        {
            JOptionPane.showMessageDialog(this, "Erro", "Não foi possível criar o arquivo", JOptionPane.ERROR_MESSAGE);
        }
        
        JOptionPane.showMessageDialog(this, "Encriptação realizada com sucesso!", "Mensagem encriptada", JOptionPane.PLAIN_MESSAGE);
        
    }//GEN-LAST:event_encryptButtonActionPerformed

    private void chooseFileButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chooseFileButtonActionPerformed
    {//GEN-HEADEREND:event_chooseFileButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setDialogTitle("Abrir arquivo");
        fileChooser.setFileFilter(new TextFileFilter());
        int resultado = fileChooser.showOpenDialog(this);

        if (resultado == JFileChooser.CANCEL_OPTION)
        {
            return;
        }

        File chosenFile = fileChooser.getSelectedFile();

        if(chosenFile == null || chosenFile.getName().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Nome inválido", "Nome inválido", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String path = chosenFile.getAbsolutePath();
        
        if (!chosenFile.exists()) return;

        try 
        {
            bytesReadFromFileEncryption = TextReader.readFile(path);
            stringReadFromFileEncryption = new String(bytesReadFromFileEncryption, "UTF-8");
            
            originalFileTextArea.setText(stringReadFromFileEncryption);
            originalFilenameField.setText(path);
            
            enableEncryptButtonCheck();
        } 
        catch (IOException ex) 
        {
            JOptionPane.showMessageDialog(this, "Não foi possível abrir o arquivo", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_chooseFileButtonActionPerformed

    private void RSAKeyTextFieldKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_RSAKeyTextFieldKeyTyped
    {//GEN-HEADEREND:event_RSAKeyTextFieldKeyTyped
        enableEncryptButtonCheck();
    }//GEN-LAST:event_RSAKeyTextFieldKeyTyped

    private void NKeyTextFieldKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_NKeyTextFieldKeyTyped
    {//GEN-HEADEREND:event_NKeyTextFieldKeyTyped
        enableEncryptButtonCheck();
    }//GEN-LAST:event_NKeyTextFieldKeyTyped

    private void RSADecryptKeyTextFieldKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_RSADecryptKeyTextFieldKeyTyped
    {//GEN-HEADEREND:event_RSADecryptKeyTextFieldKeyTyped
        enableDecryptButtonCheck();
    }//GEN-LAST:event_RSADecryptKeyTextFieldKeyTyped

    private void NDecryptKeyTextFieldKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_NDecryptKeyTextFieldKeyTyped
    {//GEN-HEADEREND:event_NDecryptKeyTextFieldKeyTyped
        enableDecryptButtonCheck();
    }//GEN-LAST:event_NDecryptKeyTextFieldKeyTyped

    private void decryptChooseFileButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_decryptChooseFileButtonActionPerformed
    {//GEN-HEADEREND:event_decryptChooseFileButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setDialogTitle("Abrir arquivo criptografado");
        fileChooser.setFileFilter(new TextFileFilter());
        int resultado = fileChooser.showOpenDialog(this);

        if (resultado == JFileChooser.CANCEL_OPTION)
        {
            return;
        }

        File chosenFile = fileChooser.getSelectedFile();

        if(chosenFile == null || chosenFile.getName().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Nome inválido", "Nome inválido", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String path = chosenFile.getAbsolutePath();
        
        if (!chosenFile.exists()) return;

        try 
        {
            bytesReadFromFileDecryption = TextReader.readFile(path);
            stringReadFromFileDecryption = new String(bytesReadFromFileDecryption, "UTF-8");
            
            loadedEncryptedFileTextArea.setText(stringReadFromFileDecryption);
            encryptedFilenameDecryptionField.setText(path);
            
            enableDecryptButtonCheck();
        } 
        catch (IOException ex) 
        {
            JOptionPane.showMessageDialog(this, "Não foi possível abrir o arquivo", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_decryptChooseFileButtonActionPerformed

    private void decryptButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_decryptButtonActionPerformed
    {//GEN-HEADEREND:event_decryptButtonActionPerformed
        String inputKey;
        String inputN;
        BigInteger bigIntegerKey;
        BigInteger bigIntegerN;
        
        inputKey = RSADecryptKeyTextField.getText();
        
        inputN = NDecryptKeyTextField.getText();
        
        if (inputKey.isEmpty() || inputN.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Especifique uma chave RSA e o parâmetro N", "Campos não preenchidos", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        /* RSA Encryption section */
        
        try { bigIntegerKey = new BigInteger(inputKey); }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(this, "Chave RSA com formato incorreto (não é um número)", "Parâmetro incorreto", JOptionPane.ERROR_MESSAGE);
            return;
        }
          
        try { bigIntegerN = new BigInteger(inputN); }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(this, "Parâmetro N com formato incorreto (não é um número)", "Parâmetro incorreto", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        RSAKey key = new RSAKey(bigIntegerKey, bigIntegerN);
        Encrypter decrypter = new Encrypter(key);
        
        try{

            decryptedBytes = decrypter.decrypt(bytesReadFromFileDecryption);
        
            /* End of RSA encryption section */
            
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            fileChooser.setDialogTitle("Salvar arquivo decriptado como");
            fileChooser.setFileFilter(new TextFileFilter());
            int resultado = fileChooser.showSaveDialog(this);

            if (resultado == JFileChooser.CANCEL_OPTION)
            {
                return;
            }

            File chosenFile = fileChooser.getSelectedFile();

            if(chosenFile.getName().equals(""))
            {
                JOptionPane.showMessageDialog(this, "Nome inválido", "Nome inválido", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String pathToWrite = chosenFile.getAbsolutePath() + ".txt";
            
            try 
            {
                TextWriter.writeOnFile(pathToWrite, decryptedBytes);
                
                decryptedFilenameField.setText(pathToWrite);
                decryptedFileTextArea.setText(new String(decryptedBytes));
            } 
            catch (IOException ex) 
            {
                JOptionPane.showMessageDialog(this, "Erro", "Não foi possível criar o arquivo", JOptionPane.ERROR_MESSAGE);
            }
            
            JOptionPane.showMessageDialog(this, "Decriptação realizada com sucesso!", "Mensagem decriptada", JOptionPane.PLAIN_MESSAGE);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Não foi possível decriptar. Talvez você tenha usado a chave errada ou arquivo errado?");
        }
    }//GEN-LAST:event_decryptButtonActionPerformed
    
    private void generateAndSaveKeys()
    {
        RSAKey[] keys = KeyFactory.generatePair();
        JFileChooser fileChooser;
        int resultado;
        File chosenFile;
        String pathToWrite;
        
        // Save public key area
        
        fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setDialogTitle("Salvar chave pública como");
        fileChooser.setFileFilter(new RSAKeyFileFilter());
        resultado = fileChooser.showSaveDialog(this);

        if (resultado == JFileChooser.CANCEL_OPTION) return;

        chosenFile = fileChooser.getSelectedFile();

        if(chosenFile.getName().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Nome inválido", "Nome inválido", JOptionPane.ERROR_MESSAGE);
            return;
        }

        pathToWrite = chosenFile.getAbsolutePath() + ".rkey";
        
        try 
        {
            KeyFileHandler.saveKey(keys[PUBLIC], pathToWrite);
        } 
        catch (IOException ex) 
        {
            JOptionPane.showMessageDialog(this, "Erro", "Não foi possível criar o arquivo", JOptionPane.ERROR_MESSAGE);
        }
        
        // Save private key area
        
        fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setDialogTitle("Salvar chave privada como");
        fileChooser.setFileFilter(new RSAKeyFileFilter());
        resultado = fileChooser.showSaveDialog(this);

        if (resultado == JFileChooser.CANCEL_OPTION) return;

        chosenFile = fileChooser.getSelectedFile();

        if(chosenFile.getName().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Nome inválido", "Nome inválido", JOptionPane.ERROR_MESSAGE);
            return;
        }

        pathToWrite = chosenFile.getAbsolutePath() + ".rkey";
        
        try 
        {
            // save file here
            KeyFileHandler.saveKey(keys[PRIVATE], pathToWrite);
        } 
        catch (IOException ex) 
        {
            JOptionPane.showMessageDialog(this, "Erro", "Não foi possível criar o arquivo", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void encryptKeyGenButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_encryptKeyGenButtonActionPerformed
    {//GEN-HEADEREND:event_encryptKeyGenButtonActionPerformed
        generateAndSaveKeys();
    }//GEN-LAST:event_encryptKeyGenButtonActionPerformed

    private void decryptKeyGenButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_decryptKeyGenButtonActionPerformed
    {//GEN-HEADEREND:event_decryptKeyGenButtonActionPerformed
        generateAndSaveKeys();
    }//GEN-LAST:event_decryptKeyGenButtonActionPerformed

    private RSAKey loadKey()
    {
        RSAKey key;
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setDialogTitle("Carregar chave");
        fileChooser.setFileFilter(new RSAKeyFileFilter());
        int resultado = fileChooser.showOpenDialog(this);

        if (resultado == JFileChooser.CANCEL_OPTION)
        {
            return null;
        }

        File chosenFile = fileChooser.getSelectedFile();

        if(chosenFile == null || chosenFile.getName().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Nome inválido", "Nome inválido", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        String path = chosenFile.getAbsolutePath();
        
        if (!chosenFile.exists()) return null;

        try 
        {
            key = KeyFileHandler.readKey(path);
            return key;
        } 
        catch (IOException ex) 
        {
            JOptionPane.showMessageDialog(this, "Não foi possível abrir o arquivo", "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
        return null;
    }
    
    private void encryptLoadKeyButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_encryptLoadKeyButtonActionPerformed
    {//GEN-HEADEREND:event_encryptLoadKeyButtonActionPerformed
        RSAKey loadedKey = loadKey();
        
        if (loadedKey != null)
        {
            RSAKeyTextField.setText(loadedKey.key.toString());
            NKeyTextField.setText(loadedKey.n.toString());
            
            enableEncryptButtonCheck();
        }
    }//GEN-LAST:event_encryptLoadKeyButtonActionPerformed

    private void decryptLoadKeyButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_decryptLoadKeyButtonActionPerformed
    {//GEN-HEADEREND:event_decryptLoadKeyButtonActionPerformed
        RSAKey loadedKey = loadKey();
        
        if (loadedKey != null)
        {
            RSADecryptKeyTextField.setText(loadedKey.key.toString());
            NDecryptKeyTextField.setText(loadedKey.n.toString());
            
            enableDecryptButtonCheck();
        }
    }//GEN-LAST:event_decryptLoadKeyButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            /*for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }*/
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(HomeSecurity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(HomeSecurity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(HomeSecurity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(HomeSecurity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new HomeSecurity().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField NDecryptKeyTextField;
    private javax.swing.JLabel NKeyDecryptKeyLabel;
    private javax.swing.JTextField NKeyTextField;
    private javax.swing.JLabel RSADecryptKeyLabel;
    private javax.swing.JTextField RSADecryptKeyTextField;
    private javax.swing.JLabel RSAKeyLabel;
    private javax.swing.JTextField RSAKeyTextField;
    private javax.swing.JButton chooseFileButton;
    private javax.swing.JButton decryptButton;
    private javax.swing.JButton decryptChooseFileButton;
    private javax.swing.JButton decryptKeyGenButton;
    private javax.swing.JButton decryptLoadKeyButton;
    private javax.swing.JPanel decryptTab;
    private javax.swing.JTextArea decryptedFileTextArea;
    private javax.swing.JTextField decryptedFilenameField;
    private javax.swing.JLabel decryptionDecryptedFilenameLabel;
    private javax.swing.JLabel decryptionEncryptedFilenameLabel;
    private javax.swing.JLabel decryptionPreviewLabel;
    private javax.swing.JButton encryptButton;
    private javax.swing.JButton encryptKeyGenButton;
    private javax.swing.JButton encryptLoadKeyButton;
    private javax.swing.JPanel encryptTab;
    private javax.swing.JLabel encryptedFileLabel;
    private javax.swing.JTextField encryptedFilenameDecryptionField;
    private javax.swing.JTextField encryptedFilenameField;
    private javax.swing.JTextArea encryptedTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea loadedEncryptedFileTextArea;
    private javax.swing.JLabel nLabel;
    private javax.swing.JLabel originalFileLabel;
    private javax.swing.JTextArea originalFileTextArea;
    private javax.swing.JTextField originalFilenameField;
    private javax.swing.JLabel previewLabel;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
}
